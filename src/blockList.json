{
    "blocks": {
        "argument_reporter_boolean": {
            "function": "",
            "separator": "",
            "close": "",
            "delay": false,
            "after": ""
        },
        "argument_reporter_string_number": {
            "function": "",
            "separator": "",
            "close": "",
            "delay": false,
            "after": ""
        },
        "control_create_clone_of": {
            "function": "CreateClone(",
            "separator": "",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "control_create_clone_of_menu": {
            "function": "",
            "separator": "",
            "close": "",
            "delay": false,
            "after": ""
        },
        "control_delete_this_clone": {
            "function": "DeleteClone(",
            "separator": "",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "control_forever": {
            "function": "while (true){",
            "separator": "",
            "close": "}",
            "delay": true,
            "after": ""
        },
        "control_if": {
            "function": "if ((bool)",
            "separator": "",
            "close": "}",
            "delay": false,
            "after": ""
        },
        "control_if_else": {
            "function": "if ((bool)",
            "separator": "",
            "close": "}",
            "delay": false,
            "after": ""
        },
        "control_repeat": {
            "function": "int TIMES = Mathf.Round(ERROR",
            "separator": ");for (int ITERATION = 0; ITERATION < TIMES; ITERATION++){",
            "close": "}",
            "delay": true,
            "after": ""
        },
        "control_repeat_until": {
            "function": "while (!(bool)",
            "separator": "",
            "close": "}",
            "delay": true,
            "after": ""
        },
        "control_stop": {
            "function": "",
            "separator": "",
            "close": "",
            "delay": false,
            "after": ""
        },
        "control_wait": {
            "function": "yield return new WaitForSecondsRealtime(ToFloat(",
            "separator": "",
            "close": "));",
            "delay": false,
            "after": ""
        },
        "control_wait_until": {
            "function": "yield return new WaitUntil(() => ",
            "separator": "",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "data_addtolist": {
            "function": ".Add(",
            "separator": "",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "data_changevariableby": {
            "function": " + ToFloat(",
            "separator": "",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "data_deletealloflist": {
            "function": ".Clear(",
            "separator": "",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "data_deleteoflist": {
            "function": ".RemoveAt(ToInt(",
            "separator": "",
            "close": "));",
            "delay": false,
            "after": ""
        },
        "data_insertatlist": {
            "function": ".Insert(item: ",
            "separator": ", index: ToInt(",
            "close": "));",
            "delay": false,
            "after": ""
        },
        "data_itemnumoflist": {
            "function": ".FindIndex(item => (object)item == ",
            "separator": "",
            "close": ")",
            "delay": false,
            "after": ""
        },
        "data_itemoflist": {
            "function": ", ToFloat(",
            "separator": "",
            "close": "))",
            "delay": false,
            "after": ""
        },
        "data_lengthoflist": {
            "function": ".Count",
            "separator": "",
            "close": "",
            "delay": false,
            "after": ""
        },
        "data_listcontainsitem": {
            "function": ".Contains((object)",
            "separator": "",
            "close": ")",
            "delay": false,
            "after": ""
        },
        "data_replaceitemoflist": {
            "function": ", ToFloat(",
            "separator": "), ",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "event_whenthisspriteclicked": {
            "function": "",
            "separator": "",
            "close": "",
            "delay": false,
            "after": ""
        },
        "event_whenkeypressed": {
            "function": "",
            "separator": "",
            "close": "",
            "delay": false,
            "after": ""
        },
        "data_setvariableto": {
            "function": " = ",
            "separator": "",
            "close": ";",
            "delay": false,
            "after": ""
        },
        "event_broadcast": {
            "function": "StartCoroutine(SendMessageToAll(",
            "separator": "",
            "close": "));",
            "delay": false,
            "after": ""
        },
        "event_broadcastandwait": {
            "function": "yield return StartCoroutine(SendMessageToAll(",
            "separator": "",
            "close": ", true));",
            "delay": false,
            "after": ""
        },
        "event_whenbroadcastreceived": {
            "function": "",
            "separator": "",
            "close": "",
            "delay": false,
            "after": "yield return null;}"
        },
        "event_whenflagclicked": {
            "function": "IEnumerator MainThread(){",
            "separator": "",
            "close": "",
            "delay": false,
            "after": "yield return null;}"
        },
        "looks_changesizeby": {
            "function": "ChangeSize(",
            "separator": "",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "looks_costume": {
            "function": "",
            "separator": "",
            "close": "",
            "delay": false,
            "after": ""
        },
        "looks_costumenumbername": {
            "function": "",
            "separator": "",
            "close": "",
            "delay": false,
            "after": ""
        },
        "motion_direction": {
            "function": "transform.rotation.z",
            "separator": "",
            "close": "",
            "delay": false,
            "after": ""
        },
        "looks_goforwardbackwardlayers": {
            "function": "",
            "separator": "",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "looks_gotofrontback": {
            "function": "",
            "separator": "",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "looks_hide": {
            "function": "Hide(",
            "separator": "",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "looks_nextcostume": {
            "function": "NextCostume(",
            "separator": "",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "looks_setsizeto": {
            "function": "SetSize(",
            "separator": "",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "looks_show": {
            "function": "Show(",
            "separator": "",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "looks_size": {
            "function": "transform.localScale.x",
            "separator": "",
            "close": "",
            "delay": false,
            "after": ""
        },
        "looks_switchcostumeto": {
            "function": "SetCostume(",
            "separator": "",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "motion_changexby": {
            "function": "ChangeX(",
            "separator": "",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "motion_changeyby": {
            "function": "ChangeY(",
            "separator": "",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "motion_goto": {
            "function": "GoTo(",
            "separator": "",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "motion_goto_menu": {
            "function": "",
            "separator": "",
            "close": "",
            "delay": false,
            "after": ""
        },
        "motion_gotoxy": {
            "function": "GoToXY(",
            "separator": ", ",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "motion_movesteps": {
            "function": "MoveSteps(",
            "separator": "",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "motion_pointindirection": {
            "function": "SetRotation(",
            "separator": "",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "motion_pointtowards": {
            "function": "PointTowards(",
            "separator": "",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "motion_pointtowards_menu": {
            "function": "",
            "separator": "",
            "close": "",
            "delay": false,
            "after": ""
        },
        "motion_setx": {
            "function": "SetX(",
            "separator": "",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "motion_sety": {
            "function": "SetY(",
            "separator": "",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "motion_turnleft": {
            "function": "TurnLeft(",
            "separator": "",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "motion_turnright": {
            "function": "TurnRight(",
            "separator": "",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "motion_xposition": {
            "function": "transform.position.x",
            "separator": "",
            "close": "",
            "delay": false,
            "after": ""
        },
        "motion_yposition": {
            "function": "transform.position.y",
            "separator": "",
            "close": "",
            "delay": false,
            "after": ""
        },
        "operator_add": {
            "function": "(ToFloat(",
            "separator": ") + ToFloat(",
            "close": "))",
            "delay": false,
            "after": ""
        },
        "operator_and": {
            "function": "(",
            "separator": "&&",
            "close": ")",
            "delay": false,
            "after": ""
        },
        "operator_contains": {
            "function": "",
            "separator": ".Contains(",
            "close": ".ToString())",
            "delay": false,
            "after": ""
        },
        "operator_divide": {
            "function": "(ToFloat(",
            "separator": ") / ToFloat(",
            "close": "))",
            "delay": false,
            "after": ""
        },
        "operator_equals": {
            "function": "((",
            "separator": ").ToString() == (",
            "close": ").ToString())",
            "delay": false,
            "after": ""
        },
        "operator_gt": {
            "function": "(ToFloat(",
            "separator": ") > ToFloat(",
            "close": "))",
            "delay": false,
            "after": ""
        },
        "operator_join": {
            "function": "((",
            "separator": ").ToString() + (",
            "close": ").ToString())",
            "delay": false,
            "after": ""
        },
        "operator_length": {
            "function": "(",
            "separator": "",
            "close": ".ToString()).Length",
            "delay": false,
            "after": ""
        },
        "operator_letter_of": {
            "function": "LetterOf(",
            "separator": ", ",
            "close": ")",
            "delay": false,
            "after": ""
        },
        "operator_lt": {
            "function": "(ToFloat(",
            "separator": ") < ToFloat(",
            "close": "))",
            "delay": false,
            "after": ""
        },
        "operator_mathop": {
            "function": "",
            "separator": "",
            "close": "))",
            "delay": false,
            "after": ""
        },
        "sensing_of": {
            "function": "",
            "separator": "",
            "close": "",
            "delay": false,
            "after": ""
        },
        "sensing_of_object_menu": {
            "function": "",
            "separator": "",
            "close": "",
            "delay": false,
            "after": ""
        },
        "operator_mod": {
            "function": "(ToFloat(",
            "separator": ") % ToFloat(",
            "close": "))",
            "delay": false,
            "after": ""
        },
        "operator_multiply": {
            "function": "(ToFloat(",
            "separator": ") * ToFloat(",
            "close": "))",
            "delay": false,
            "after": ""
        },
        "operator_not": {
            "function": "!(",
            "separator": "",
            "close": ")",
            "delay": false,
            "after": ""
        },
        "operator_or": {
            "function": "(",
            "separator": " || ",
            "close": ")",
            "delay": false,
            "after": ""
        },
        "operator_random": {
            "function": "UnityEngine.Random.Range(ToFloat(",
            "separator": "), ToFloat(",
            "close": "))",
            "delay": false,
            "after": ""
        },
        "operator_round": {
            "function": "Mathf.Round(ToFloat(",
            "separator": "",
            "close": "))",
            "delay": false,
            "after": ""
        },
        "operator_subtract": {
            "function": "(ToFloat(",
            "separator": ") - ToFloat(",
            "close": "))",
            "delay": false,
            "after": ""
        },
        "pen_changePenColorParamBy": {
            "function": "ChangePenColor(",
            "separator": ", ",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "pen_changePenSizeBy": {
            "function": "penWidth += ToFloat(",
            "separator": "",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "pen_clear": {
            "function": "Clear(",
            "separator": "",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "pen_menu_colorParam": {
            "function": "",
            "separator": "",
            "close": "",
            "delay": false,
            "after": ""
        },
        "pen_penDown": {
            "function": "PenDown()",
            "separator": "",
            "close": ";",
            "delay": false,
            "after": ""
        },
        "pen_penUp": {
            "function": "PenUp()",
            "separator": "",
            "close": ";",
            "delay": false,
            "after": ""
        },
        "motion_glideto": {
            "function": "yield return StartCoroutine(GlideToTarget(",
            "separator": ", ",
            "close": "));",
            "delay": false,
            "after": ""
        },
        "motion_glidesecstoxy": {
            "function": "yield return StartCoroutine(GlideToXY(",
            "separator": ", ",
            "close": "));",
            "delay": false,
            "after": ""
        },
        "motion_glideto_menu": {
            "function": "",
            "separator": "",
            "close": "",
            "delay": false,
            "after": ""
        },
        "pen_setPenColorToColor": {
            "function": "penColor = HexToColor(",
            "separator": "",
            "close": ".ToString());",
            "delay": false,
            "after": ""
        },
        "pen_setPenSizeTo": {
            "function": "penWidth = ToFloat(",
            "separator": "",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "pen_stamp": {
            "function": "Stamp(",
            "separator": "",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "pen_setPenColorParamTo": {
            "function": "SetPenColor(",
            "separator": ", ",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "procedures_call": {
            "function": "(",
            "separator": ", ",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "sensing_current": {
            "function": "",
            "separator": "",
            "close": "",
            "delay": false,
            "after": ""
        },
        "sensing_distanceto": {
            "function": "getDistanceTo(",
            "separator": "",
            "close": ")",
            "delay": false,
            "after": ""
        },
        "sensing_distancetomenu": {
            "function": "",
            "separator": "",
            "close": "",
            "delay": false,
            "after": ""
        },
        "sensing_keyoptions": {
            "function": "",
            "separator": "",
            "close": "",
            "delay": false,
            "after": ""
        },
        "sensing_keypressed": {
            "function": "GetKey(",
            "separator": "",
            "close": ")",
            "delay": false,
            "after": ""
        },
        "sensing_mousedown": {
            "function": "Input.GetMouseButton(0)",
            "separator": "",
            "close": "",
            "delay": false,
            "after": ""
        },
        "sensing_mousex": {
            "function": "GetMousePositionX()",
            "separator": "",
            "close": "",
            "delay": false,
            "after": ""
        },
        "sensing_mousey": {
            "function": "GetMousePositionY()",
            "separator": "",
            "close": "",
            "delay": false,
            "after": ""
        },
        "sensing_resettimer": {
            "function": "GlobalVariables.ResetTimer(",
            "separator": "",
            "close": ");",
            "delay": false,
            "after": ""
        },
        "sensing_timer": {
            "function": "GlobalVariables.timer",
            "separator": "",
            "close": "",
            "delay": false,
            "after": ""
        },
        "sensing_touchingobject": {
            "function": "Touching(",
            "separator": "",
            "close": ")",
            "delay": false,
            "after": ""
        },
        "sensing_touchingobjectmenu": {
            "function": "",
            "separator": "",
            "close": "",
            "delay": false,
            "after": ""
        },
        "sensing_username": {
            "function": "GlobalVariables.username",
            "separator": "",
            "close": "",
            "delay": false,
            "after": ""
        }
    }
}